name: CI

on:
  push:
  pull_request:

concurrency:
  # Skip intermediate builds: always.
  # Cancel intermediate builds: only if it is a pull request build.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}

# Required to allow `julia-actions/cache` to delete old caches that it has created
permissions:
  actions: write
  contents: read

jobs:
  build_and_test:
    name: Build and test
    runs-on: ubuntu-latest
    steps:
      - name: Check out source code
        uses: actions/checkout@v4

      - name: Set up Julia
        uses: julia-actions/setup-julia@v2

      - name: Cache the installed Julia binary artifacts
        uses: julia-actions/cache@v2

      - name: Install JuliaFormatter
        run: julia -e 'using Pkg; Pkg.add("JuliaFormatter")'

      - name: Format code
        run: julia -e 'using JuliaFormatter; format(".")'

      - name: Check for formatting differences
        run: |
          output=$(git diff --name-only)
          if [ "$output" != "" ]; then
              >&2 echo "Some files have not been formatted!"
              echo "$output"
              exit 1
          fi

      - name: Build package
        uses: julia-actions/julia-buildpkg@latest

      - name: Run tests to generate coverage
        uses: julia-actions/julia-runtest@latest

      - name: Process test coverage
        uses: julia-actions/julia-processcoverage@v1

      - name: Upload coverage reports to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/codecov-action@v5
        with:
          files: lcov.info
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

      - name: Run tests (again) to generate JUnit-formatted report
        run: |
          julia --project=. -e 'using TestReports; TestReports.test("NumericalMethodsCourse")'

      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          files: testlog.xml
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
